Nie u»ywaj¡c klasy string (z nagªówka <string>), zdeniowa¢ wªasn¡ klas¦ String,
której obiekty przechowuj¡ napisy (wska¹niki do tablic znaków) o dowolnej dªugo±ci.
Mo»na u»ywa¢ funkcji w rodzaju strlen i strcpy z nagªówka <cstring> oraz funkcji
operuj¡cych na znakach (jak tolower czy toupper z nagªówka <cctype>.
Zdeniowa¢ odpowiednie konstruktory (w szczególno±ci kopiuj¡cy) i destruktor. Zde-
niowa¢ te» metody tak, »e po String s("New York");
 s.toUpper() zmienia napis na "NEW YORK" i zwraca odniesienie (referencj¦)
do s po tej zmianie;
 s.toLower() zmienia napis na "new york" i zwraca odniesienie (referencj¦)
do s po zmianie;
 s.length() zwraca dªugo±¢ napisu (nie licz¡c ewentualnego znaku pustego ko«-
cz¡cego napis).
Przeci¡»y¢ te» operatory
 '<<' tak, aby mo»liwe byªo wyprowadzanie napisów do strumienia wyj±ciowego;
 '==' i ' !=' tak, aby s1==s2 i s1!=s2 dziaªaªy tak jak w Jawie s1.equals(s2)
oraz |!s1.equals(s2)|. Powinno równie» dziaªa¢ porównywanie ze zwykªymi Cnapisami
(np. s != "literal napisowy");
 przypisania '=';
 dodawania (konkatenacja) obiektów klasy String, równie» do zwykªych C-napisów,
n.p.: s="abc"+s1+s2+"def".
Na przykªad poni»szy program
#include <iostream>
#include <cstring>
#include <cctype>
using namespace std;
class String {
char* nap;
public:
String(const char* n);
String(const String& s);
String operator+(const String& s) const;
String operator+(const char* n) const;
String& operator=(const String& s);
bool operator==(const String& s) const;
bool operator!=(const String& s) const;
String& toLower();
String& toUpper();
size_t length() const;
~String();
friend String operator+(const char*,const String&);
friend ostream& operator<<(ostream&, const String&);
};
int main(void) {
String s = "To " + String("be ") + "or not to be";
cout << s << endl;
if (s == "To be or not to be")
s = String(s.toUpper());
else
s = String(s.toLower());
cout << "Length = " << s.length() << endl;
cout << s << endl;
}
po uzupeªnieniu implementacji powinien si¦ skompilowa¢ i wypisa¢
To be or not to be
Length = 18
TO BE OR NOT TO BE