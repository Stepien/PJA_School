Prosz¦ napisa¢ (i przetestowa¢) szablon klasy Queue reprezentuj¡cej kolejk¦ (FIFO)
elementów pewnego typu. Implementacja powinna opiera¢ si¦ na strukturze listy
jednokierunkowej, dla której pami¦tany jest wska¹nik head wskazuj¡cy na pierwszy
element listy oraz tail wskazuj¡cy na element ostatni. Operacje, jakie s¡ okre±lone
dla kolejki s¡ nast¦puj¡ce:
 konstruktor tworz¡cy kolejk¦ pust¡;
 put  dodaje element na ko«cu kolejki (bez przebiegania przez wszystkie elementy
listy!);
 get  zwraca element z pierwszego w¦zªa kolejki i usuwa ten w¦zeª;
 empty  odpowiada na pytanie, czy kolejka jest pusta;
 destruktor (który powinien co± pisa¢, aby±my widzieli, które elementy s¡ usuwane)..
Program mo»e mie¢ nast¦puj¡c¡ struktur¦:
#include <iostream>
template<typename T>
class Queue {
struct Node {
// ...
};
Node* head;
Node* tail;
public:
Queue();
bool empty() const;
void put(const T& data);
T get();
~Queue();
};
int main() {
int data1,data2;
Queue<int>* q = new Queue<int>();
q->put(1);
data1 = q->get();
std::cout << " data1=" << data1 << std::endl;
q->put(1);
q->put(2);
data1 = q->get();
data2 = q->get();
std::cout << " data1=" << data1
<< " data2=" << data2 << std::endl;
q->put(1); q->put(2); q->put(3);
q->put(4); q->put(5); q->put(6);
while (!q->empty()) std::cout << " " << q->get();
std::cout << std::endl;
q->put(1); q->put(2); q->put(3);
delete q;
}
Program powinien wydrukowa¢ co± w rodzaju:
data1=1
data1=1 data2=2
1 2 3 4 5 6
Del:1 Del:2 Del:3