Alokowanie pami¦ci, C-struktury (rozdziaªy 12 i 13).
Prosz¦ napisa¢ (i przetestowa¢) opisany ni»ej program:
Struktura opisuj¡ca w¦zeª listy ma posta¢
struct Node {
int data;
Node* next;
};
(ka»dy w¦zeª przechowuje danew tym przypadku po prostu liczb¦ caªkowit¡ data).
1. Napisa¢ funkcj¦ o nagªówku
void add(Node*& head, int data);
pobieraj¡c¡ wska¹nik do gªowy listy (nullptr reprezentuje list¦ pust¡) i dan¡
caªkowit¡ a dodaj¡c¡ w¦zeª listy z dan¡ data tak, »eby w¦zªy na li±cie pozostawa
ªy caªy czas uporz¡dkowane wedªug przechowywanych w skªadowej data
warto±ci (w kolejno±ci rosn¡cej).
2. Napisa¢ funkcj¦ o nagªówku
bool any(const Node* head, function<bool(int)> pred);
pobieraj¡c¡ wska¹nik do gªowy listy i zwracaj¡c¡ true wtedy i tylko wtedy,
gdy dana zawarta w jakimkolwiek w¦¹le listy speªnia predykat pred (to znaczy
zwraca dla niego true).
3. Napisa¢ funkcj¦ o nagªówku
bool all(const Node* head, function<bool(int)> pred);
pobieraj¡c¡ wska¹nik do gªowy listy i zwracaj¡c¡ true wtedy i tylko wtedy,
gdy dana zawarta w ka»dym w¦¹le listy speªnia predykat pred.
4. Napisa¢ funkcj¦ o nagªówku
void deleteList(Node*& head);
zwalniaj¡c¡ (za pomoc¡ delete) wszystkie w¦zªy listy do której wska¹nik przekazany
zostaª jako argument. Przy ka»dym usuwaniu w¦zªa funkcja powinna
drukowa¢ warto±¢ danej z usuwanego w¦zªa, aby±my widzieli, »e rzeczywi±cie
w¦zªy te s¡ usuwane. Po powrocie z funkcji head powinno by¢ wska¹nikiem
pustym (bo reprezentuje list¦, która staªa si¦ pusta).
5. Napisa¢ funkcj¦ o nagªówku
void printList(const Node* head);
wypisuj¡c¡ dane z kolejnych w¦zªów listy w jednym wierszu.
Zauwa», »e funkcje add i deleteList pobieraj¡ wska¹nik do gªowy listy przez referencj
¦, by mogªy ten wska¹nik zmodykowa¢.
Przykªadowy schemat programu:
#include <iostream>
#include <functional>
using std::cout; using std::endl;
using std::cerr; using std::function;
struct Node {
int data;
Node* next;
};
void printList(const Node* head) {
// ...
}
void add(Node*& head, int data) {
// ...
}
bool any(const Node* head, function<bool(int)> pred) {
// ...
}
bool all(const Node* head, function<bool(int)> pred) {
// ...
}
void deleteList(Node*& head) {
// ...
}
int main() {
Node* head = 0;
add(head,3);
add(head,6);
add(head,2);
add(head,8);
add(head,5);
printList(head);
cout << std::boolalpha;
cout << "less than 10 all "
<< all(head,[] (int i) -> bool {return i< 10;})
<< endl;
cout << "is even all "
<< all(head,[] (int i) -> bool {return i%2 == 0;})
<< endl;
cout << "is even any "
<< any(head,[] (int i) -> bool {return i%2 == 0;})
<< endl;
deleteList(head);
}
Program powinien wydrukowa¢ co± w rodzaju:
2 3 5 6 8
less than 10 all true
is even all false
is even any true
Del: 2 Del: 3 Del: 5 Del: 6 Del: 8