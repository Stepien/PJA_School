
import java.awt.BorderLayout;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Locale;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;

public class Database {
	
	private String connectionString;
	private TravelData travelData;
	private Locale locale = new Locale("pl", "PL");
	private DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
	private Connection connection;
	private Statement statement;
	
	private JTable table;
	private JButton buttonPL = new JButton("Polski");
	private JButton buttonEN = new JButton("Angielski");
	
	private JFrame window; 
	private JPanel buttonPanel;
	private JScrollPane scrollPane;

	public Database(String connectionString, TravelData travelData) {
		
		this.travelData = travelData;
		this.connectionString = connectionString;	
	}

	public void create() {
		try {
			connection = DriverManager.getConnection(connectionString + ";create=true;");
			statement = connection.createStatement();
			initTable();
			for (Travel travel : travelData.travels) add(travel);
		} catch (SQLException e) {
		} finally {
			try {
				if (connection != null) {
					connection.close();
				}
			} catch (SQLException e) {
			}
		}
	}
	
	private void initWindow() {
		window = new JFrame();
		window.setSize(800, 400);
		window.setLocationRelativeTo(null);
		window.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		
	}
	
	private void refreshGui() {
		table.setModel(new LocaleTableModel(travelData.travels, locale));
		buttonPL.setText(ResourceManager.getText(locale, "pl"));
		buttonEN.setText(ResourceManager.getText(locale, "en"));
	}
	
	private void initButtons() {
		buttonPanel = new JPanel(new GridLayout(2, 1));
		buttonPanel.add(buttonPL);
		buttonPanel.add(buttonEN);
		
		buttonPL.addActionListener((ActionEvent e) -> {
			locale = new Locale("pl", "PL");
			refreshGui();
			
		});

		buttonEN.addActionListener((ActionEvent e) -> {
			locale = new Locale("en", "GB");
			refreshGui();
		});
	}

	public void showGui() {
		initWindow();
		table = new JTable(new LocaleTableModel(travelData.travels, locale));
		scrollPane = new JScrollPane(table);
		initButtons();
		window.add(scrollPane, BorderLayout.CENTER);
		window.add(buttonPanel, BorderLayout.SOUTH);
		window.setVisible(true);
	}
	
	public void initTable() {
		
		try {
			statement.executeUpdate("drop table TRAVELS");
		} catch (SQLException e) {
		}

		String createString = "create table TRAVELS( " + 
				"id integer not null generated by default as identity, " +
				"country varchar(50) not null, " +
				"arrivalDate varchar(50) not null, " +
				"returnDate varchar(50) not null, " + 
				"place varchar(50) not null," + 
				"price float not null," +
				"currency varchar(50) not null," + 
				"PRIMARY KEY(id))";

		try {
			statement.executeUpdate(createString);
		} catch (SQLException e) {
		}
	}

	public void add(Travel travel) {
		try {
			PreparedStatement preparedStatement = connection.prepareStatement(
							"insert into TRAVELS (country, arrivalDate, returnDate, place, price, currency) values (?, ?, ?, ?, ?, ?)",
							PreparedStatement.RETURN_GENERATED_KEYS);
			
			preparedStatement.setString(1, travel.getCountry());
			preparedStatement.setString(2, dateFormat.format(travel.getArrivalDate()));
			preparedStatement.setString(3, dateFormat.format(travel.getReturnDate()));
			preparedStatement.setString(4, travel.getPlace());
			preparedStatement.setFloat(5, travel.getPrice());
			preparedStatement.setString(6, travel.getCurrency());
			preparedStatement.execute();
			ResultSet resultSet = preparedStatement.getGeneratedKeys();
			while (resultSet.next()) travel.setId(resultSet.getInt(1));
			resultSet.close();
			preparedStatement.close();
		} catch (Exception e) {
		}
	}
}
